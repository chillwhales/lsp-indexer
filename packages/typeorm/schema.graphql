enum LSP4TokenTypeEnum {
  TOKEN
  NFT
  COLLECTION
}

enum LSP8TokenIdFormatEnum {
  NUMBER
  STRING
  ADDRESS
  BYTES32
}

enum OperationType {
  CALL
  CREATE
  CREATE2
  STATICCALL
  DELEGATECALL
}

type Executed @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  address: String! @index
  decodedOperationType: OperationType! @index
  operationType: BigInt! @index
  value: BigInt! @index
  target: String! @index
  selector: String! @index
  universalProfile: UniversalProfile @index
}

type UniversalReceiver @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  address: String! @index
  from: String! @index
  value: BigInt! @index
  typeId: String! @index
  receivedData: String!
  returnedValue: String!
  universalProfile: UniversalProfile! @index
}

type Follow @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  address: String! @index
  followerAddress: String! @index
  followedAddress: String! @index
  followerUniversalProfile: UniversalProfile! @index
  followedUniversalProfile: UniversalProfile! @index
}

type Unfollow @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  address: String! @index
  followerAddress: String! @index
  unfollowedAddress: String! @index
  followerUniversalProfile: UniversalProfile! @index
  unfollowedUniversalProfile: UniversalProfile! @index
}

type DataChanged @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  address: String! @index
  dataKey: String! @index
  dataValue: String!
  universalProfile: UniversalProfile @index
  digitalAsset: DigitalAsset @index
}

type TokenIdDataChanged @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  tokenId: String! @index
  address: String! @index
  dataKey: String! @index
  dataValue: String!
  digitalAsset: DigitalAsset! @index
  nft: NFT! @index
}

type Transfer @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  blockNumber: Int! @index
  logIndex: Int! @index
  transactionIndex: Int! @index
  address: String! @index
  operator: String! @index
  from: String! @index
  to: String! @index
  amount: BigInt! @index
  tokenId: String @index
  force: Boolean! @index
  data: String!
  digitalAsset: DigitalAsset! @index
  nft: NFT @index
}

type UniversalProfile @entity {
  id: ID! @unique
  address: String! @index
  lsp3Profile: LSP3Profile @index
  ownedAssets: [OwnedAsset!]! @derivedFrom(field: "universalProfile")
  ownedTokens: [OwnedToken!]! @derivedFrom(field: "universalProfile")

  # Events
  executed: [Executed!]! @derivedFrom(field: "universalProfile")
  universalReceiver: [UniversalReceiver!]! @derivedFrom(field: "universalProfile")
  dataChanged: [DataChanged!]! @derivedFrom(field: "universalProfile")
}

type DigitalAsset @entity {
  id: ID! @unique
  address: String! @index
  totalSupply: TotalSupply @derivedFrom(field: "digitalAsset")
  ownedAssets: [OwnedAsset!]! @derivedFrom(field: "digitalAsset")
  ownedTokens: [OwnedToken!]! @derivedFrom(field: "digitalAsset")

  # LSP4 properties
  lsp4TokenName: LSP4TokenName @derivedFrom(field: "digitalAsset")
  lsp4TokenSymbol: LSP4TokenSymbol @derivedFrom(field: "digitalAsset")
  lsp4TokenType: LSP4TokenType @derivedFrom(field: "digitalAsset")
  lsp4Metadata: LSP4Metadata @index

  # LSP7 properties
  decimals: Decimals @derivedFrom(field: "digitalAsset")

  # LSP8 properties
  lsp8TokenIdFormat: LSP8TokenIdFormat @derivedFrom(field: "digitalAsset")
  lsp8ReferenceContract: LSP8ReferenceContract @derivedFrom(field: "digitalAsset")
  lsp8TokenMetadataBaseUri: LSP8TokenMetadataBaseURI @derivedFrom(field: "digitalAsset")
  nfts: [NFT!]! @derivedFrom(field: "digitalAsset")

  # Events
  dataChanged: [DataChanged!]! @derivedFrom(field: "digitalAsset")
  tokenIdDataChanged: [TokenIdDataChanged!]! @derivedFrom(field: "digitalAsset")
  transfer: [Transfer!]! @derivedFrom(field: "digitalAsset")
}

type TotalSupply @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: Int! @index
}

type Decimals @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: Int! @index
}

type NFT @entity @index(fields: ["tokenId", "digitalAsset"]) {
  id: ID! @unique
  tokenId: String! @index
  formattedTokenId: String @index
  address: String! @index
  digitalAsset: DigitalAsset @index
  lsp4Metadata: LSP4Metadata @index
  lsp4MetadataBaseUri: LSP4Metadata @index
  isMinted: Boolean! @index
  isBurned: Boolean! @index
  ownedToken: OwnedToken @derivedFrom(field: "nft")

  # chillwhales properties
  chillClaimed: ChillClaimed @derivedFrom(field: "nft")
  orbsClaimed: OrbsClaimed @derivedFrom(field: "nft")

  # ORBS properties
  # level: Int @index
  # cooldownExpiry: Int @index
  # faction: String @index

  # Events
  tokenIdDataChanged: [TokenIdDataChanged!]! @derivedFrom(field: "nft")
  transfer: [Transfer!]! @derivedFrom(field: "nft")
}

type OwnedAsset @entity @index(fields: ["address", "owner"]) {
  id: ID! @unique
  block: Int! @index
  timestamp: DateTime! @index
  balance: BigInt! @index
  address: String! @index
  owner: String! @index

  digitalAsset: DigitalAsset @index
  universalProfile: UniversalProfile @index

  # LSP8 properties
  tokenIds: [OwnedToken!] @derivedFrom(field: "ownedAsset")
}

type OwnedToken @entity @index(fields: ["address", "tokenId", "owner"]) {
  id: ID! @unique
  block: Int! @index
  timestamp: DateTime! @index
  tokenId: String! @index
  address: String! @index
  owner: String! @index

  nft: NFT @index @unique
  digitalAsset: DigitalAsset @index
  universalProfile: UniversalProfile @index

  ownedAsset: OwnedAsset @index
}

type LSP4TokenName @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: String @index
  rawValue: String @index
}

type LSP4TokenSymbol @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: String @index
  rawValue: String @index
}

type LSP4TokenType @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: LSP4TokenTypeEnum @index
  rawValue: String @index
}

type LSP8TokenIdFormat @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: LSP8TokenIdFormatEnum @index
  rawValue: String @index
}

type LSP8ReferenceContract @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: String @index
  rawValue: String @index
}

type LSP8TokenMetadataBaseURI @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index @unique
  value: String @index
  rawValue: String @index
}

type LSP3Profile @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  universalProfile: UniversalProfile! @index
  name: LSP3ProfileName @derivedFrom(field: "lsp3Profile")
  description: LSP3ProfileDescription @derivedFrom(field: "lsp3Profile")
  tags: [LSP3ProfileTag!]! @derivedFrom(field: "lsp3Profile")
  links: [LSP3ProfileLink!]! @derivedFrom(field: "lsp3Profile")
  avatar: [LSP3ProfileAsset!]! @derivedFrom(field: "lsp3Profile")
  profileImage: [LSP3ProfileImage!]! @derivedFrom(field: "lsp3Profile")
  backgroundImage: [LSP3ProfileBackgroundImage!]! @derivedFrom(field: "lsp3Profile")
  url: String
  rawValue: String
  decodeError: String
  fetchError: String
  isDataFetched: Boolean!
  isRetryable: Boolean!
  retryCount: Int
}

type LSP3ProfileName @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index @unique
  value: String @index
}

type LSP3ProfileDescription @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index @unique
  value: String
}
type LSP3ProfileTag @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index
  value: String @index
}

type LSP3ProfileLink @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index
  title: String @index
  url: String @index
}

type LSP3ProfileAsset @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index
  url: String
  fileType: String @index
  verificationMethod: String
  verificationData: String
  verificationSource: String
}

type LSP3ProfileImage @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index
  width: Int @index
  height: Int @index
  url: String
  verificationMethod: String
  verificationData: String
  verificationSource: String
}

type LSP3ProfileBackgroundImage @entity {
  id: ID! @unique
  lsp3Profile: LSP3Profile! @index
  width: Int @index
  height: Int @index
  url: String
  verificationMethod: String
  verificationData: String
  verificationSource: String
}

type LSP4Metadata @entity {
  id: ID! @unique
  timestamp: DateTime! @index
  address: String! @index
  digitalAsset: DigitalAsset! @index
  tokenId: String @index
  nft: NFT @index
  name: LSP4MetadataName @derivedFrom(field: "lsp4Metadata")
  description: LSP4MetadataDescription @derivedFrom(field: "lsp4Metadata")
  score: LSP4MetadataScore @derivedFrom(field: "lsp4Metadata")
  rank: LSP4MetadataRank @derivedFrom(field: "lsp4Metadata")
  links: [LSP4MetadataLink!]! @derivedFrom(field: "lsp4Metadata")
  icon: [LSP4MetadataIcon!]! @derivedFrom(field: "lsp4Metadata")
  images: [LSP4MetadataImage!]! @derivedFrom(field: "lsp4Metadata")
  assets: [LSP4MetadataAsset!]! @derivedFrom(field: "lsp4Metadata")
  attributes: [LSP4MetadataAttribute!]! @derivedFrom(field: "lsp4Metadata")
  url: String
  rawValue: String
  decodeError: String
  fetchError: String
  isDataFetched: Boolean!
  isRetryable: Boolean!
  retryCount: Int
}

type LSP4MetadataName @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index @unique
  value: String @index
}

type LSP4MetadataDescription @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index @unique
  value: String
}

type LSP4MetadataScore @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index @unique
  value: Int @index
}

type LSP4MetadataRank @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index @unique
  value: Int @index
}

type LSP4MetadataLink @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index
  title: String @index
  url: String @index
}

type LSP4MetadataIcon @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index
  width: Int @index
  height: Int @index
  url: String
  verificationMethod: String
  verificationData: String
  verificationSource: String
}

type LSP4MetadataImage @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index
  width: Int @index
  height: Int @index
  url: String
  verificationMethod: String
  verificationData: String
  verificationSource: String
}

type LSP4MetadataAsset @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index
  url: String
  fileType: String @index
  verificationMethod: String
  verificationData: String
  verificationSource: String
}

type LSP4MetadataAttribute @entity {
  id: ID! @unique
  lsp4Metadata: LSP4Metadata! @index
  key: String @index
  value: String @index
  type: String @index
  score: Float @index
  rarity: Float @index
}

type ChillClaimed @entity {
  id: ID! @unique
  address: String! @index
  digitalAsset: DigitalAsset! @index
  tokenId: String! @index
  nft: NFT! @index @unique
  value: Boolean!
}

type OrbsClaimed @entity {
  id: ID! @unique
  address: String! @index
  digitalAsset: DigitalAsset! @index
  tokenId: String! @index
  nft: NFT! @index @unique
  value: Boolean!
}
